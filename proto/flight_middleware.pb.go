// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: proto/flight_middleware.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestFlightInsurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaxAdult       int32                `protobuf:"varint,1,opt,name=PaxAdult,proto3" json:"PaxAdult,omitempty"`
	PaxChild       int32                `protobuf:"varint,2,opt,name=PaxChild,proto3" json:"PaxChild,omitempty"`
	PaxInfant      int32                `protobuf:"varint,3,opt,name=PaxInfant,proto3" json:"PaxInfant,omitempty"`
	FlightSegments []*DataFlightJourney `protobuf:"bytes,4,rep,name=FlightSegments,proto3" json:"FlightSegments,omitempty"`
}

func (x *RequestFlightInsurance) Reset() {
	*x = RequestFlightInsurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFlightInsurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFlightInsurance) ProtoMessage() {}

func (x *RequestFlightInsurance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFlightInsurance.ProtoReflect.Descriptor instead.
func (*RequestFlightInsurance) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{0}
}

func (x *RequestFlightInsurance) GetPaxAdult() int32 {
	if x != nil {
		return x.PaxAdult
	}
	return 0
}

func (x *RequestFlightInsurance) GetPaxChild() int32 {
	if x != nil {
		return x.PaxChild
	}
	return 0
}

func (x *RequestFlightInsurance) GetPaxInfant() int32 {
	if x != nil {
		return x.PaxInfant
	}
	return 0
}

func (x *RequestFlightInsurance) GetFlightSegments() []*DataFlightJourney {
	if x != nil {
		return x.FlightSegments
	}
	return nil
}

type ResponseFlightInsurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProviderName string               `protobuf:"bytes,2,opt,name=ProviderName,proto3" json:"ProviderName,omitempty"`
	PackageName  string               `protobuf:"bytes,3,opt,name=PackageName,proto3" json:"PackageName,omitempty"`
	Fare         *DataInsuranceFare   `protobuf:"bytes,4,opt,name=Fare,proto3" json:"Fare,omitempty"`
	Unit         string               `protobuf:"bytes,5,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Coverage     []*InsuranceCoverage `protobuf:"bytes,6,rep,name=Coverage,proto3" json:"Coverage,omitempty"`
}

func (x *ResponseFlightInsurance) Reset() {
	*x = ResponseFlightInsurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFlightInsurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlightInsurance) ProtoMessage() {}

func (x *ResponseFlightInsurance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlightInsurance.ProtoReflect.Descriptor instead.
func (*ResponseFlightInsurance) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseFlightInsurance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseFlightInsurance) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *ResponseFlightInsurance) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ResponseFlightInsurance) GetFare() *DataInsuranceFare {
	if x != nil {
		return x.Fare
	}
	return nil
}

func (x *ResponseFlightInsurance) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ResponseFlightInsurance) GetCoverage() []*InsuranceCoverage {
	if x != nil {
		return x.Coverage
	}
	return nil
}

type InsuranceCoverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	Terms       []string `protobuf:"bytes,2,rep,name=Terms,proto3" json:"Terms,omitempty"`
}

func (x *InsuranceCoverage) Reset() {
	*x = InsuranceCoverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsuranceCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsuranceCoverage) ProtoMessage() {}

func (x *InsuranceCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsuranceCoverage.ProtoReflect.Descriptor instead.
func (*InsuranceCoverage) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{2}
}

func (x *InsuranceCoverage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InsuranceCoverage) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

type DataInsuranceFare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ntsa        float64 `protobuf:"fixed64,2,opt,name=Ntsa,proto3" json:"Ntsa,omitempty"`
	TicketPrice float64 `protobuf:"fixed64,3,opt,name=TicketPrice,proto3" json:"TicketPrice,omitempty"`
}

func (x *DataInsuranceFare) Reset() {
	*x = DataInsuranceFare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataInsuranceFare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataInsuranceFare) ProtoMessage() {}

func (x *DataInsuranceFare) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataInsuranceFare.ProtoReflect.Descriptor instead.
func (*DataInsuranceFare) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{3}
}

func (x *DataInsuranceFare) GetNtsa() float64 {
	if x != nil {
		return x.Ntsa
	}
	return 0
}

func (x *DataInsuranceFare) GetTicketPrice() float64 {
	if x != nil {
		return x.TicketPrice
	}
	return 0
}

type ResponseCheckProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId   string `protobuf:"bytes,1,opt,name=ProviderId,proto3" json:"ProviderId,omitempty"`
	ProviderName string `protobuf:"bytes,2,opt,name=ProviderName,proto3" json:"ProviderName,omitempty"`
}

func (x *ResponseCheckProvider) Reset() {
	*x = ResponseCheckProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCheckProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCheckProvider) ProtoMessage() {}

func (x *ResponseCheckProvider) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCheckProvider.ProtoReflect.Descriptor instead.
func (*ResponseCheckProvider) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseCheckProvider) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *ResponseCheckProvider) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

type ScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaxChild        int32  `protobuf:"varint,1,opt,name=PaxChild,proto3" json:"PaxChild,omitempty"`
	PaxAdult        int32  `protobuf:"varint,2,opt,name=PaxAdult,proto3" json:"PaxAdult,omitempty"`
	PaxInfant       int32  `protobuf:"varint,3,opt,name=PaxInfant,proto3" json:"PaxInfant,omitempty"`
	AirlineCode     string `protobuf:"bytes,4,opt,name=AirlineCode,proto3" json:"AirlineCode,omitempty"`
	OriginCode      string `protobuf:"bytes,5,opt,name=OriginCode,proto3" json:"OriginCode,omitempty"`
	DestinationCode string `protobuf:"bytes,6,opt,name=DestinationCode,proto3" json:"DestinationCode,omitempty"`
	DepartureDate   string `protobuf:"bytes,7,opt,name=DepartureDate,proto3" json:"DepartureDate,omitempty"`
	ReturnDate      string `protobuf:"bytes,8,opt,name=ReturnDate,proto3" json:"ReturnDate,omitempty"`
	IsCheapest      bool   `protobuf:"varint,9,opt,name=IsCheapest,proto3" json:"IsCheapest,omitempty"`
	Cabin           string `protobuf:"bytes,10,opt,name=Cabin,proto3" json:"Cabin,omitempty"`
	UserId          string `protobuf:"bytes,11,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduleRequest) GetPaxChild() int32 {
	if x != nil {
		return x.PaxChild
	}
	return 0
}

func (x *ScheduleRequest) GetPaxAdult() int32 {
	if x != nil {
		return x.PaxAdult
	}
	return 0
}

func (x *ScheduleRequest) GetPaxInfant() int32 {
	if x != nil {
		return x.PaxInfant
	}
	return 0
}

func (x *ScheduleRequest) GetAirlineCode() string {
	if x != nil {
		return x.AirlineCode
	}
	return ""
}

func (x *ScheduleRequest) GetOriginCode() string {
	if x != nil {
		return x.OriginCode
	}
	return ""
}

func (x *ScheduleRequest) GetDestinationCode() string {
	if x != nil {
		return x.DestinationCode
	}
	return ""
}

func (x *ScheduleRequest) GetDepartureDate() string {
	if x != nil {
		return x.DepartureDate
	}
	return ""
}

func (x *ScheduleRequest) GetReturnDate() string {
	if x != nil {
		return x.ReturnDate
	}
	return ""
}

func (x *ScheduleRequest) GetIsCheapest() bool {
	if x != nil {
		return x.IsCheapest
	}
	return false
}

func (x *ScheduleRequest) GetCabin() string {
	if x != nil {
		return x.Cabin
	}
	return ""
}

func (x *ScheduleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchId                string                  `protobuf:"bytes,1,opt,name=SearchId,proto3" json:"SearchId,omitempty"`
	Departure               []*DataScheduleResponse `protobuf:"bytes,2,rep,name=Departure,proto3" json:"Departure,omitempty"`
	Return                  []*DataScheduleResponse `protobuf:"bytes,3,rep,name=Return,proto3" json:"Return,omitempty"`
	IsMergedDepartureReturn bool                    `protobuf:"varint,4,opt,name=IsMergedDepartureReturn,proto3" json:"IsMergedDepartureReturn,omitempty"`
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleResponse) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *ScheduleResponse) GetDeparture() []*DataScheduleResponse {
	if x != nil {
		return x.Departure
	}
	return nil
}

func (x *ScheduleResponse) GetReturn() []*DataScheduleResponse {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *ScheduleResponse) GetIsMergedDepartureReturn() bool {
	if x != nil {
		return x.IsMergedDepartureReturn
	}
	return false
}

type DataScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectingTroughFare bool                 `protobuf:"varint,1,opt,name=ConnectingTroughFare,proto3" json:"ConnectingTroughFare,omitempty"`
	DurationHour         string               `protobuf:"bytes,2,opt,name=DurationHour,proto3" json:"DurationHour,omitempty"`
	DurationMinute       string               `protobuf:"bytes,3,opt,name=DurationMinute,proto3" json:"DurationMinute,omitempty"`
	DayChange            string               `protobuf:"bytes,4,opt,name=DayChange,proto3" json:"DayChange,omitempty"`
	AirlineCode          string               `protobuf:"bytes,5,opt,name=AirlineCode,proto3" json:"AirlineCode,omitempty"`
	Segment              []*DataFlightJourney `protobuf:"bytes,6,rep,name=Segment,proto3" json:"Segment,omitempty"`
	ClassGroup           []*DataClassGroup    `protobuf:"bytes,7,rep,name=ClassGroup,proto3" json:"ClassGroup,omitempty"`
	MergedSchedule       []*MergedSchedule    `protobuf:"bytes,8,rep,name=MergedSchedule,proto3" json:"MergedSchedule,omitempty"`
	ScheduleId           string               `protobuf:"bytes,9,opt,name=ScheduleId,proto3" json:"ScheduleId,omitempty"`
}

func (x *DataScheduleResponse) Reset() {
	*x = DataScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataScheduleResponse) ProtoMessage() {}

func (x *DataScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataScheduleResponse.ProtoReflect.Descriptor instead.
func (*DataScheduleResponse) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{7}
}

func (x *DataScheduleResponse) GetConnectingTroughFare() bool {
	if x != nil {
		return x.ConnectingTroughFare
	}
	return false
}

func (x *DataScheduleResponse) GetDurationHour() string {
	if x != nil {
		return x.DurationHour
	}
	return ""
}

func (x *DataScheduleResponse) GetDurationMinute() string {
	if x != nil {
		return x.DurationMinute
	}
	return ""
}

func (x *DataScheduleResponse) GetDayChange() string {
	if x != nil {
		return x.DayChange
	}
	return ""
}

func (x *DataScheduleResponse) GetAirlineCode() string {
	if x != nil {
		return x.AirlineCode
	}
	return ""
}

func (x *DataScheduleResponse) GetSegment() []*DataFlightJourney {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *DataScheduleResponse) GetClassGroup() []*DataClassGroup {
	if x != nil {
		return x.ClassGroup
	}
	return nil
}

func (x *DataScheduleResponse) GetMergedSchedule() []*MergedSchedule {
	if x != nil {
		return x.MergedSchedule
	}
	return nil
}

func (x *DataScheduleResponse) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type MergedSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Journeys             []*DataJourneyMergedSchedule `protobuf:"bytes,1,rep,name=Journeys,proto3" json:"Journeys,omitempty"` // filled by flight journey
	Classes              []*DataClassMergedSchedule   `protobuf:"bytes,2,rep,name=Classes,proto3" json:"Classes,omitempty"`
	IsDeparture          bool                         `protobuf:"varint,3,opt,name=IsDeparture,proto3" json:"IsDeparture,omitempty"`
	TotalDepartureHour   string                       `protobuf:"bytes,4,opt,name=TotalDepartureHour,proto3" json:"TotalDepartureHour,omitempty"`
	TotalDepartureMinute string                       `protobuf:"bytes,5,opt,name=TotalDepartureMinute,proto3" json:"TotalDepartureMinute,omitempty"`
	DepartureAt          string                       `protobuf:"bytes,6,opt,name=DepartureAt,proto3" json:"DepartureAt,omitempty"`
	ArrivalAt            string                       `protobuf:"bytes,7,opt,name=ArrivalAt,proto3" json:"ArrivalAt,omitempty"`
}

func (x *MergedSchedule) Reset() {
	*x = MergedSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedSchedule) ProtoMessage() {}

func (x *MergedSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedSchedule.ProtoReflect.Descriptor instead.
func (*MergedSchedule) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{8}
}

func (x *MergedSchedule) GetJourneys() []*DataJourneyMergedSchedule {
	if x != nil {
		return x.Journeys
	}
	return nil
}

func (x *MergedSchedule) GetClasses() []*DataClassMergedSchedule {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *MergedSchedule) GetIsDeparture() bool {
	if x != nil {
		return x.IsDeparture
	}
	return false
}

func (x *MergedSchedule) GetTotalDepartureHour() string {
	if x != nil {
		return x.TotalDepartureHour
	}
	return ""
}

func (x *MergedSchedule) GetTotalDepartureMinute() string {
	if x != nil {
		return x.TotalDepartureMinute
	}
	return ""
}

func (x *MergedSchedule) GetDepartureAt() string {
	if x != nil {
		return x.DepartureAt
	}
	return ""
}

func (x *MergedSchedule) GetArrivalAt() string {
	if x != nil {
		return x.ArrivalAt
	}
	return ""
}

type DataJourneyMergedSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JourneyId      string `protobuf:"bytes,1,opt,name=JourneyId,proto3" json:"JourneyId,omitempty"`
	DepartureCode  string `protobuf:"bytes,2,opt,name=DepartureCode,proto3" json:"DepartureCode,omitempty"`
	ArrivalCode    string `protobuf:"bytes,3,opt,name=ArrivalCode,proto3" json:"ArrivalCode,omitempty"`
	DepartureAt    string `protobuf:"bytes,4,opt,name=DepartureAt,proto3" json:"DepartureAt,omitempty"`
	ArrivalAt      string `protobuf:"bytes,5,opt,name=ArrivalAt,proto3" json:"ArrivalAt,omitempty"`
	DurationHour   string `protobuf:"bytes,6,opt,name=DurationHour,proto3" json:"DurationHour,omitempty"`
	DurationMinute string `protobuf:"bytes,7,opt,name=DurationMinute,proto3" json:"DurationMinute,omitempty"`
	AirlineName    string `protobuf:"bytes,8,opt,name=AirlineName,proto3" json:"AirlineName,omitempty"`
	AirlineCode    string `protobuf:"bytes,9,opt,name=AirlineCode,proto3" json:"AirlineCode,omitempty"`
	AircraftType   string `protobuf:"bytes,10,opt,name=AircraftType,proto3" json:"AircraftType,omitempty"`
	StopOver       string `protobuf:"bytes,11,opt,name=StopOver,proto3" json:"StopOver,omitempty"`
}

func (x *DataJourneyMergedSchedule) Reset() {
	*x = DataJourneyMergedSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataJourneyMergedSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataJourneyMergedSchedule) ProtoMessage() {}

func (x *DataJourneyMergedSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataJourneyMergedSchedule.ProtoReflect.Descriptor instead.
func (*DataJourneyMergedSchedule) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{9}
}

func (x *DataJourneyMergedSchedule) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetDepartureCode() string {
	if x != nil {
		return x.DepartureCode
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetArrivalCode() string {
	if x != nil {
		return x.ArrivalCode
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetDepartureAt() string {
	if x != nil {
		return x.DepartureAt
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetArrivalAt() string {
	if x != nil {
		return x.ArrivalAt
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetDurationHour() string {
	if x != nil {
		return x.DurationHour
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetDurationMinute() string {
	if x != nil {
		return x.DurationMinute
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetAirlineName() string {
	if x != nil {
		return x.AirlineName
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetAirlineCode() string {
	if x != nil {
		return x.AirlineCode
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetAircraftType() string {
	if x != nil {
		return x.AircraftType
	}
	return ""
}

func (x *DataJourneyMergedSchedule) GetStopOver() string {
	if x != nil {
		return x.StopOver
	}
	return ""
}

type DataClassMergedSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JourneyId string `protobuf:"bytes,1,opt,name=JourneyId,proto3" json:"JourneyId,omitempty"`
	Cabin     string `protobuf:"bytes,2,opt,name=Cabin,proto3" json:"Cabin,omitempty"`
	ClassCode string `protobuf:"bytes,3,opt,name=ClassCode,proto3" json:"ClassCode,omitempty"`
	BagsKilo  string `protobuf:"bytes,4,opt,name=BagsKilo,proto3" json:"BagsKilo,omitempty"`
	BagsQty   string `protobuf:"bytes,5,opt,name=BagsQty,proto3" json:"BagsQty,omitempty"`
}

func (x *DataClassMergedSchedule) Reset() {
	*x = DataClassMergedSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataClassMergedSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassMergedSchedule) ProtoMessage() {}

func (x *DataClassMergedSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassMergedSchedule.ProtoReflect.Descriptor instead.
func (*DataClassMergedSchedule) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{10}
}

func (x *DataClassMergedSchedule) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

func (x *DataClassMergedSchedule) GetCabin() string {
	if x != nil {
		return x.Cabin
	}
	return ""
}

func (x *DataClassMergedSchedule) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *DataClassMergedSchedule) GetBagsKilo() string {
	if x != nil {
		return x.BagsKilo
	}
	return ""
}

func (x *DataClassMergedSchedule) GetBagsQty() string {
	if x != nil {
		return x.BagsQty
	}
	return ""
}

type DataFlightJourney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightNo         string         `protobuf:"bytes,1,opt,name=FlightNo,proto3" json:"FlightNo,omitempty"`
	OriginCode       string         `protobuf:"bytes,2,opt,name=OriginCode,proto3" json:"OriginCode,omitempty"`
	DestinationCode  string         `protobuf:"bytes,3,opt,name=DestinationCode,proto3" json:"DestinationCode,omitempty"`
	DurationHour     string         `protobuf:"bytes,4,opt,name=DurationHour,proto3" json:"DurationHour,omitempty"`
	DurationMinute   string         `protobuf:"bytes,5,opt,name=DurationMinute,proto3" json:"DurationMinute,omitempty"`
	DepartDateTime   string         `protobuf:"bytes,6,opt,name=DepartDateTime,proto3" json:"DepartDateTime,omitempty"`
	ArriveDateTime   string         `protobuf:"bytes,7,opt,name=ArriveDateTime,proto3" json:"ArriveDateTime,omitempty"`
	StopOver         string         `protobuf:"bytes,8,opt,name=StopOver,proto3" json:"StopOver,omitempty"`
	Meal             bool           `protobuf:"varint,9,opt,name=Meal,proto3" json:"Meal,omitempty"`
	ClassCode        string         `protobuf:"bytes,10,opt,name=ClassCode,proto3" json:"ClassCode,omitempty"` // Is used flight booking
	AirlineCode      string         `protobuf:"bytes,11,opt,name=AirlineCode,proto3" json:"AirlineCode,omitempty"`
	BaggageKilo      int32          `protobuf:"varint,12,opt,name=BaggageKilo,proto3" json:"BaggageKilo,omitempty"`
	SegmentId        string         `protobuf:"bytes,13,opt,name=SegmentId,proto3" json:"SegmentId,omitempty"`
	OperatingAirline string         `protobuf:"bytes,14,opt,name=OperatingAirline,proto3" json:"OperatingAirline,omitempty"`
	DetailDeparture  *DetailAirport `protobuf:"bytes,15,opt,name=DetailDeparture,proto3" json:"DetailDeparture,omitempty"`
	DetailArrival    *DetailAirport `protobuf:"bytes,16,opt,name=DetailArrival,proto3" json:"DetailArrival,omitempty"`
	JourneyNum       int32          `protobuf:"varint,17,opt,name=JourneyNum,proto3" json:"JourneyNum,omitempty"`
	TransitDuration  int32          `protobuf:"varint,18,opt,name=TransitDuration,proto3" json:"TransitDuration,omitempty"`
	AircraftType     string         `protobuf:"bytes,19,opt,name=AircraftType,proto3" json:"AircraftType,omitempty"`
	ClassId          string         `protobuf:"bytes,20,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	JourneyDuration  int32          `protobuf:"varint,21,opt,name=JourneyDuration,proto3" json:"JourneyDuration,omitempty"`
}

func (x *DataFlightJourney) Reset() {
	*x = DataFlightJourney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFlightJourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFlightJourney) ProtoMessage() {}

func (x *DataFlightJourney) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFlightJourney.ProtoReflect.Descriptor instead.
func (*DataFlightJourney) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{11}
}

func (x *DataFlightJourney) GetFlightNo() string {
	if x != nil {
		return x.FlightNo
	}
	return ""
}

func (x *DataFlightJourney) GetOriginCode() string {
	if x != nil {
		return x.OriginCode
	}
	return ""
}

func (x *DataFlightJourney) GetDestinationCode() string {
	if x != nil {
		return x.DestinationCode
	}
	return ""
}

func (x *DataFlightJourney) GetDurationHour() string {
	if x != nil {
		return x.DurationHour
	}
	return ""
}

func (x *DataFlightJourney) GetDurationMinute() string {
	if x != nil {
		return x.DurationMinute
	}
	return ""
}

func (x *DataFlightJourney) GetDepartDateTime() string {
	if x != nil {
		return x.DepartDateTime
	}
	return ""
}

func (x *DataFlightJourney) GetArriveDateTime() string {
	if x != nil {
		return x.ArriveDateTime
	}
	return ""
}

func (x *DataFlightJourney) GetStopOver() string {
	if x != nil {
		return x.StopOver
	}
	return ""
}

func (x *DataFlightJourney) GetMeal() bool {
	if x != nil {
		return x.Meal
	}
	return false
}

func (x *DataFlightJourney) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *DataFlightJourney) GetAirlineCode() string {
	if x != nil {
		return x.AirlineCode
	}
	return ""
}

func (x *DataFlightJourney) GetBaggageKilo() int32 {
	if x != nil {
		return x.BaggageKilo
	}
	return 0
}

func (x *DataFlightJourney) GetSegmentId() string {
	if x != nil {
		return x.SegmentId
	}
	return ""
}

func (x *DataFlightJourney) GetOperatingAirline() string {
	if x != nil {
		return x.OperatingAirline
	}
	return ""
}

func (x *DataFlightJourney) GetDetailDeparture() *DetailAirport {
	if x != nil {
		return x.DetailDeparture
	}
	return nil
}

func (x *DataFlightJourney) GetDetailArrival() *DetailAirport {
	if x != nil {
		return x.DetailArrival
	}
	return nil
}

func (x *DataFlightJourney) GetJourneyNum() int32 {
	if x != nil {
		return x.JourneyNum
	}
	return 0
}

func (x *DataFlightJourney) GetTransitDuration() int32 {
	if x != nil {
		return x.TransitDuration
	}
	return 0
}

func (x *DataFlightJourney) GetAircraftType() string {
	if x != nil {
		return x.AircraftType
	}
	return ""
}

func (x *DataFlightJourney) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *DataFlightJourney) GetJourneyDuration() int32 {
	if x != nil {
		return x.JourneyDuration
	}
	return 0
}

type DetailAirport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iata     string `protobuf:"bytes,1,opt,name=Iata,proto3" json:"Iata,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Country  string `protobuf:"bytes,4,opt,name=Country,proto3" json:"Country,omitempty"`
	Timezone int32  `protobuf:"varint,5,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
}

func (x *DetailAirport) Reset() {
	*x = DetailAirport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailAirport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailAirport) ProtoMessage() {}

func (x *DetailAirport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailAirport.ProtoReflect.Descriptor instead.
func (*DetailAirport) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{12}
}

func (x *DetailAirport) GetIata() string {
	if x != nil {
		return x.Iata
	}
	return ""
}

func (x *DetailAirport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DetailAirport) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DetailAirport) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *DetailAirport) GetTimezone() int32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

type DataClassGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubClass   []*DataSubClass `protobuf:"bytes,1,rep,name=SubClass,proto3" json:"SubClass,omitempty"`
	SegementId string          `protobuf:"bytes,2,opt,name=SegementId,proto3" json:"SegementId,omitempty"`
}

func (x *DataClassGroup) Reset() {
	*x = DataClassGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataClassGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassGroup) ProtoMessage() {}

func (x *DataClassGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassGroup.ProtoReflect.Descriptor instead.
func (*DataClassGroup) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{13}
}

func (x *DataClassGroup) GetSubClass() []*DataSubClass {
	if x != nil {
		return x.SubClass
	}
	return nil
}

func (x *DataClassGroup) GetSegementId() string {
	if x != nil {
		return x.SegementId
	}
	return ""
}

type DataSubClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassCode       string  `protobuf:"bytes,1,opt,name=ClassCode,proto3" json:"ClassCode,omitempty"`
	RemainCabin     int32   `protobuf:"varint,2,opt,name=RemainCabin,proto3" json:"RemainCabin,omitempty"`
	NetAgentPrice   float64 `protobuf:"fixed64,3,opt,name=NetAgentPrice,proto3" json:"NetAgentPrice,omitempty"`
	TotalPrice      float64 `protobuf:"fixed64,4,opt,name=TotalPrice,proto3" json:"TotalPrice,omitempty"`
	CabinCategory   string  `protobuf:"bytes,5,opt,name=CabinCategory,proto3" json:"CabinCategory,omitempty"`
	AdminFee        float64 `protobuf:"fixed64,6,opt,name=AdminFee,proto3" json:"AdminFee,omitempty"`
	BaggageKilos    int32   `protobuf:"varint,7,opt,name=BaggageKilos,proto3" json:"BaggageKilos,omitempty"`
	PercentAdminFee float64 `protobuf:"fixed64,8,opt,name=PercentAdminFee,proto3" json:"PercentAdminFee,omitempty"`
	NominalAdminFee float64 `protobuf:"fixed64,9,opt,name=NominalAdminFee,proto3" json:"NominalAdminFee,omitempty"`
	Meal            bool    `protobuf:"varint,11,opt,name=Meal,proto3" json:"Meal,omitempty"`
	ClassId         string  `protobuf:"bytes,12,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
}

func (x *DataSubClass) Reset() {
	*x = DataSubClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSubClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSubClass) ProtoMessage() {}

func (x *DataSubClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSubClass.ProtoReflect.Descriptor instead.
func (*DataSubClass) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{14}
}

func (x *DataSubClass) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *DataSubClass) GetRemainCabin() int32 {
	if x != nil {
		return x.RemainCabin
	}
	return 0
}

func (x *DataSubClass) GetNetAgentPrice() float64 {
	if x != nil {
		return x.NetAgentPrice
	}
	return 0
}

func (x *DataSubClass) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *DataSubClass) GetCabinCategory() string {
	if x != nil {
		return x.CabinCategory
	}
	return ""
}

func (x *DataSubClass) GetAdminFee() float64 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

func (x *DataSubClass) GetBaggageKilos() int32 {
	if x != nil {
		return x.BaggageKilos
	}
	return 0
}

func (x *DataSubClass) GetPercentAdminFee() float64 {
	if x != nil {
		return x.PercentAdminFee
	}
	return 0
}

func (x *DataSubClass) GetNominalAdminFee() float64 {
	if x != nil {
		return x.NominalAdminFee
	}
	return 0
}

func (x *DataSubClass) GetMeal() bool {
	if x != nil {
		return x.Meal
	}
	return false
}

func (x *DataSubClass) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type FlightPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Departure                      []*DataFlightJourney `protobuf:"bytes,1,rep,name=Departure,proto3" json:"Departure,omitempty"`
	Return                         []*DataFlightJourney `protobuf:"bytes,2,rep,name=Return,proto3" json:"Return,omitempty"`
	PaxChild                       int32                `protobuf:"varint,3,opt,name=PaxChild,proto3" json:"PaxChild,omitempty"`
	PaxAdult                       int32                `protobuf:"varint,4,opt,name=PaxAdult,proto3" json:"PaxAdult,omitempty"`
	PaxInfant                      int32                `protobuf:"varint,5,opt,name=PaxInfant,proto3" json:"PaxInfant,omitempty"`
	Insurance                      bool                 `protobuf:"varint,6,opt,name=Insurance,proto3" json:"Insurance,omitempty"`
	DepartureAirline               string               `protobuf:"bytes,7,opt,name=DepartureAirline,proto3" json:"DepartureAirline,omitempty"`
	ReturnAirline                  string               `protobuf:"bytes,8,opt,name=ReturnAirline,proto3" json:"ReturnAirline,omitempty"`
	InternationalFlight            bool                 `protobuf:"varint,9,opt,name=InternationalFlight,proto3" json:"InternationalFlight,omitempty"`
	DataContact                    *DataContact         `protobuf:"bytes,10,opt,name=DataContact,proto3" json:"DataContact,omitempty"`
	AgentContact                   *DataAgentContact    `protobuf:"bytes,11,opt,name=AgentContact,proto3" json:"AgentContact,omitempty"`
	UserId                         string               `protobuf:"bytes,12,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Passangers                     []*DataPassenger     `protobuf:"bytes,13,rep,name=Passangers,proto3" json:"Passangers,omitempty"`
	DepartureConnectingThroughfare bool                 `protobuf:"varint,14,opt,name=DepartureConnectingThroughfare,proto3" json:"DepartureConnectingThroughfare,omitempty"`
	ReturnConnectingThroughfare    bool                 `protobuf:"varint,15,opt,name=ReturnConnectingThroughfare,proto3" json:"ReturnConnectingThroughfare,omitempty"`
	SearchId                       string               `protobuf:"bytes,16,opt,name=SearchId,proto3" json:"SearchId,omitempty"`
	FareId                         string               `protobuf:"bytes,17,opt,name=FareId,proto3" json:"FareId,omitempty"`
	InsuranceId                    string               `protobuf:"bytes,18,opt,name=InsuranceId,proto3" json:"InsuranceId,omitempty"`
	ScheduleId                     string               `protobuf:"bytes,19,opt,name=ScheduleId,proto3" json:"ScheduleId,omitempty"`
}

func (x *FlightPriceRequest) Reset() {
	*x = FlightPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightPriceRequest) ProtoMessage() {}

func (x *FlightPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightPriceRequest.ProtoReflect.Descriptor instead.
func (*FlightPriceRequest) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{15}
}

func (x *FlightPriceRequest) GetDeparture() []*DataFlightJourney {
	if x != nil {
		return x.Departure
	}
	return nil
}

func (x *FlightPriceRequest) GetReturn() []*DataFlightJourney {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *FlightPriceRequest) GetPaxChild() int32 {
	if x != nil {
		return x.PaxChild
	}
	return 0
}

func (x *FlightPriceRequest) GetPaxAdult() int32 {
	if x != nil {
		return x.PaxAdult
	}
	return 0
}

func (x *FlightPriceRequest) GetPaxInfant() int32 {
	if x != nil {
		return x.PaxInfant
	}
	return 0
}

func (x *FlightPriceRequest) GetInsurance() bool {
	if x != nil {
		return x.Insurance
	}
	return false
}

func (x *FlightPriceRequest) GetDepartureAirline() string {
	if x != nil {
		return x.DepartureAirline
	}
	return ""
}

func (x *FlightPriceRequest) GetReturnAirline() string {
	if x != nil {
		return x.ReturnAirline
	}
	return ""
}

func (x *FlightPriceRequest) GetInternationalFlight() bool {
	if x != nil {
		return x.InternationalFlight
	}
	return false
}

func (x *FlightPriceRequest) GetDataContact() *DataContact {
	if x != nil {
		return x.DataContact
	}
	return nil
}

func (x *FlightPriceRequest) GetAgentContact() *DataAgentContact {
	if x != nil {
		return x.AgentContact
	}
	return nil
}

func (x *FlightPriceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FlightPriceRequest) GetPassangers() []*DataPassenger {
	if x != nil {
		return x.Passangers
	}
	return nil
}

func (x *FlightPriceRequest) GetDepartureConnectingThroughfare() bool {
	if x != nil {
		return x.DepartureConnectingThroughfare
	}
	return false
}

func (x *FlightPriceRequest) GetReturnConnectingThroughfare() bool {
	if x != nil {
		return x.ReturnConnectingThroughfare
	}
	return false
}

func (x *FlightPriceRequest) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *FlightPriceRequest) GetFareId() string {
	if x != nil {
		return x.FareId
	}
	return ""
}

func (x *FlightPriceRequest) GetInsuranceId() string {
	if x != nil {
		return x.InsuranceId
	}
	return ""
}

func (x *FlightPriceRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type FlightPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandTotalPrice      float64              `protobuf:"fixed64,1,opt,name=GrandTotalPrice,proto3" json:"GrandTotalPrice,omitempty"`
	Insurance            float64              `protobuf:"fixed64,2,opt,name=Insurance,proto3" json:"Insurance,omitempty"`
	AdminFee             float64              `protobuf:"fixed64,3,opt,name=AdminFee,proto3" json:"AdminFee,omitempty"`
	TotalOrderPrice      float64              `protobuf:"fixed64,4,opt,name=TotalOrderPrice,proto3" json:"TotalOrderPrice,omitempty"`
	TotalTax             float64              `protobuf:"fixed64,5,opt,name=TotalTax,proto3" json:"TotalTax,omitempty"`
	TotalOrderWithMarkup float64              `protobuf:"fixed64,6,opt,name=TotalOrderWithMarkup,proto3" json:"TotalOrderWithMarkup,omitempty"`
	TotalAdultFare       float64              `protobuf:"fixed64,7,opt,name=TotalAdultFare,proto3" json:"TotalAdultFare,omitempty"`
	TotalChildFare       float64              `protobuf:"fixed64,8,opt,name=TotalChildFare,proto3" json:"TotalChildFare,omitempty"`
	TotalInfantFare      float64              `protobuf:"fixed64,9,opt,name=TotalInfantFare,proto3" json:"TotalInfantFare,omitempty"`
	FlightDetailPrice    []*FlightDetailPrice `protobuf:"bytes,10,rep,name=FlightDetailPrice,proto3" json:"FlightDetailPrice,omitempty"`
	IsInternational      bool                 `protobuf:"varint,11,opt,name=IsInternational,proto3" json:"IsInternational,omitempty"`
	SegmentFlight        []*DataFlightJourney `protobuf:"bytes,12,rep,name=SegmentFlight,proto3" json:"SegmentFlight,omitempty"`
	FareId               string               `protobuf:"bytes,13,opt,name=FareId,proto3" json:"FareId,omitempty"`
}

func (x *FlightPriceResponse) Reset() {
	*x = FlightPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightPriceResponse) ProtoMessage() {}

func (x *FlightPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightPriceResponse.ProtoReflect.Descriptor instead.
func (*FlightPriceResponse) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{16}
}

func (x *FlightPriceResponse) GetGrandTotalPrice() float64 {
	if x != nil {
		return x.GrandTotalPrice
	}
	return 0
}

func (x *FlightPriceResponse) GetInsurance() float64 {
	if x != nil {
		return x.Insurance
	}
	return 0
}

func (x *FlightPriceResponse) GetAdminFee() float64 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

func (x *FlightPriceResponse) GetTotalOrderPrice() float64 {
	if x != nil {
		return x.TotalOrderPrice
	}
	return 0
}

func (x *FlightPriceResponse) GetTotalTax() float64 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *FlightPriceResponse) GetTotalOrderWithMarkup() float64 {
	if x != nil {
		return x.TotalOrderWithMarkup
	}
	return 0
}

func (x *FlightPriceResponse) GetTotalAdultFare() float64 {
	if x != nil {
		return x.TotalAdultFare
	}
	return 0
}

func (x *FlightPriceResponse) GetTotalChildFare() float64 {
	if x != nil {
		return x.TotalChildFare
	}
	return 0
}

func (x *FlightPriceResponse) GetTotalInfantFare() float64 {
	if x != nil {
		return x.TotalInfantFare
	}
	return 0
}

func (x *FlightPriceResponse) GetFlightDetailPrice() []*FlightDetailPrice {
	if x != nil {
		return x.FlightDetailPrice
	}
	return nil
}

func (x *FlightPriceResponse) GetIsInternational() bool {
	if x != nil {
		return x.IsInternational
	}
	return false
}

func (x *FlightPriceResponse) GetSegmentFlight() []*DataFlightJourney {
	if x != nil {
		return x.SegmentFlight
	}
	return nil
}

func (x *FlightPriceResponse) GetFareId() string {
	if x != nil {
		return x.FareId
	}
	return ""
}

type FlightDetailPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketingCode string  `protobuf:"bytes,1,opt,name=MarketingCode,proto3" json:"MarketingCode,omitempty"`
	AdultFare     float64 `protobuf:"fixed64,2,opt,name=AdultFare,proto3" json:"AdultFare,omitempty"`
	ChildFare     float64 `protobuf:"fixed64,3,opt,name=ChildFare,proto3" json:"ChildFare,omitempty"`
	InfantFare    float64 `protobuf:"fixed64,4,opt,name=InfantFare,proto3" json:"InfantFare,omitempty"`
	TotalFare     float64 `protobuf:"fixed64,5,opt,name=TotalFare,proto3" json:"TotalFare,omitempty"`
}

func (x *FlightDetailPrice) Reset() {
	*x = FlightDetailPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightDetailPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDetailPrice) ProtoMessage() {}

func (x *FlightDetailPrice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDetailPrice.ProtoReflect.Descriptor instead.
func (*FlightDetailPrice) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{17}
}

func (x *FlightDetailPrice) GetMarketingCode() string {
	if x != nil {
		return x.MarketingCode
	}
	return ""
}

func (x *FlightDetailPrice) GetAdultFare() float64 {
	if x != nil {
		return x.AdultFare
	}
	return 0
}

func (x *FlightDetailPrice) GetChildFare() float64 {
	if x != nil {
		return x.ChildFare
	}
	return 0
}

func (x *FlightDetailPrice) GetInfantFare() float64 {
	if x != nil {
		return x.InfantFare
	}
	return 0
}

func (x *FlightDetailPrice) GetTotalFare() float64 {
	if x != nil {
		return x.TotalFare
	}
	return 0
}

type DataContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName       string `protobuf:"bytes,1,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName        string `protobuf:"bytes,2,opt,name=LastName,proto3" json:"LastName,omitempty"`
	PhoneNumber     string `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	IssuranceNumber string `protobuf:"bytes,4,opt,name=IssuranceNumber,proto3" json:"IssuranceNumber,omitempty"`
	EmailAddress    string `protobuf:"bytes,5,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`
}

func (x *DataContact) Reset() {
	*x = DataContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataContact) ProtoMessage() {}

func (x *DataContact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataContact.ProtoReflect.Descriptor instead.
func (*DataContact) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{18}
}

func (x *DataContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DataContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *DataContact) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *DataContact) GetIssuranceNumber() string {
	if x != nil {
		return x.IssuranceNumber
	}
	return ""
}

func (x *DataContact) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

type DataAgentContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName    string `protobuf:"bytes,1,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	Lastname     string `protobuf:"bytes,2,opt,name=Lastname,proto3" json:"Lastname,omitempty"`
	EmailAddress string `protobuf:"bytes,3,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`
	Phone        string `protobuf:"bytes,4,opt,name=Phone,proto3" json:"Phone,omitempty"`
}

func (x *DataAgentContact) Reset() {
	*x = DataAgentContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAgentContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAgentContact) ProtoMessage() {}

func (x *DataAgentContact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAgentContact.ProtoReflect.Descriptor instead.
func (*DataAgentContact) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{19}
}

func (x *DataAgentContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DataAgentContact) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *DataAgentContact) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *DataAgentContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type DataPassenger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string        `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	FirstName   string        `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName    string        `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Type        string        `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	KtpId       string        `protobuf:"bytes,5,opt,name=KtpId,proto3" json:"KtpId,omitempty"`
	DOB         string        `protobuf:"bytes,6,opt,name=DOB,proto3" json:"DOB,omitempty"`
	AdultAssoc  string        `protobuf:"bytes,7,opt,name=AdultAssoc,proto3" json:"AdultAssoc,omitempty"`
	Passport    *DataPassport `protobuf:"bytes,8,opt,name=Passport,proto3" json:"Passport,omitempty"`
	TicketNo    string        `protobuf:"bytes,9,opt,name=TicketNo,proto3" json:"TicketNo,omitempty"`
	PassengerNo string        `protobuf:"bytes,10,opt,name=PassengerNo,proto3" json:"PassengerNo,omitempty"`
}

func (x *DataPassenger) Reset() {
	*x = DataPassenger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPassenger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPassenger) ProtoMessage() {}

func (x *DataPassenger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPassenger.ProtoReflect.Descriptor instead.
func (*DataPassenger) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{20}
}

func (x *DataPassenger) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataPassenger) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DataPassenger) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *DataPassenger) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataPassenger) GetKtpId() string {
	if x != nil {
		return x.KtpId
	}
	return ""
}

func (x *DataPassenger) GetDOB() string {
	if x != nil {
		return x.DOB
	}
	return ""
}

func (x *DataPassenger) GetAdultAssoc() string {
	if x != nil {
		return x.AdultAssoc
	}
	return ""
}

func (x *DataPassenger) GetPassport() *DataPassport {
	if x != nil {
		return x.Passport
	}
	return nil
}

func (x *DataPassenger) GetTicketNo() string {
	if x != nil {
		return x.TicketNo
	}
	return ""
}

func (x *DataPassenger) GetPassengerNo() string {
	if x != nil {
		return x.PassengerNo
	}
	return ""
}

type DataPassport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number         string `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	Nationality    string `protobuf:"bytes,2,opt,name=Nationality,proto3" json:"Nationality,omitempty"`
	IssuingCountry string `protobuf:"bytes,3,opt,name=IssuingCountry,proto3" json:"IssuingCountry,omitempty"`
	Expiry         string `protobuf:"bytes,4,opt,name=Expiry,proto3" json:"Expiry,omitempty"`
}

func (x *DataPassport) Reset() {
	*x = DataPassport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPassport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPassport) ProtoMessage() {}

func (x *DataPassport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPassport.ProtoReflect.Descriptor instead.
func (*DataPassport) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{21}
}

func (x *DataPassport) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *DataPassport) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *DataPassport) GetIssuingCountry() string {
	if x != nil {
		return x.IssuingCountry
	}
	return ""
}

func (x *DataPassport) GetExpiry() string {
	if x != nil {
		return x.Expiry
	}
	return ""
}

type FlightBookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeparturePnrId                  string  `protobuf:"bytes,1,opt,name=DeparturePnrId,proto3" json:"DeparturePnrId,omitempty"`
	ReturnPnrId                     string  `protobuf:"bytes,2,opt,name=ReturnPnrId,proto3" json:"ReturnPnrId,omitempty"`
	DepartureNetAgentPrice          float64 `protobuf:"fixed64,3,opt,name=DepartureNetAgentPrice,proto3" json:"DepartureNetAgentPrice,omitempty"`
	ReturnNetAgentPrice             float64 `protobuf:"fixed64,4,opt,name=ReturnNetAgentPrice,proto3" json:"ReturnNetAgentPrice,omitempty"`
	DepartAdminFee                  float64 `protobuf:"fixed64,5,opt,name=DepartAdminFee,proto3" json:"DepartAdminFee,omitempty"`
	ReturnAdminFee                  float64 `protobuf:"fixed64,6,opt,name=ReturnAdminFee,proto3" json:"ReturnAdminFee,omitempty"`
	TotalDeparturePrice             float64 `protobuf:"fixed64,7,opt,name=TotalDeparturePrice,proto3" json:"TotalDeparturePrice,omitempty"`
	TotalReturnPrice                float64 `protobuf:"fixed64,8,opt,name=TotalReturnPrice,proto3" json:"TotalReturnPrice,omitempty"`
	TotalOrderPublishPrice          float64 `protobuf:"fixed64,9,opt,name=TotalOrderPublishPrice,proto3" json:"TotalOrderPublishPrice,omitempty"`
	DeparturePublishAgentPrice      float64 `protobuf:"fixed64,10,opt,name=DeparturePublishAgentPrice,proto3" json:"DeparturePublishAgentPrice,omitempty"`
	ReturnPublishAgentPrice         float64 `protobuf:"fixed64,11,opt,name=ReturnPublishAgentPrice,proto3" json:"ReturnPublishAgentPrice,omitempty"`
	TotalOrderWithAdminFee          float64 `protobuf:"fixed64,12,opt,name=TotalOrderWithAdminFee,proto3" json:"TotalOrderWithAdminFee,omitempty"`
	BookingResponseMessage          string  `protobuf:"bytes,13,opt,name=BookingResponseMessage,proto3" json:"BookingResponseMessage,omitempty"`
	BookingResponseCode             string  `protobuf:"bytes,14,opt,name=BookingResponseCode,proto3" json:"BookingResponseCode,omitempty"`
	TotalOrderWithTax               float64 `protobuf:"fixed64,15,opt,name=TotalOrderWithTax,proto3" json:"TotalOrderWithTax,omitempty"`
	TotalTax                        float64 `protobuf:"fixed64,16,opt,name=TotalTax,proto3" json:"TotalTax,omitempty"`
	Ntsa                            float64 `protobuf:"fixed64,17,opt,name=Ntsa,proto3" json:"Ntsa,omitempty"`
	Commision                       float64 `protobuf:"fixed64,18,opt,name=Commision,proto3" json:"Commision,omitempty"`
	TotalFare                       float64 `protobuf:"fixed64,19,opt,name=TotalFare,proto3" json:"TotalFare,omitempty"`
	TotalOrderPriceWithoutInsurance float64 `protobuf:"fixed64,20,opt,name=TotalOrderPriceWithoutInsurance,proto3" json:"TotalOrderPriceWithoutInsurance,omitempty"`
	BookingId                       string  `protobuf:"bytes,21,opt,name=BookingId,proto3" json:"BookingId,omitempty"`
}

func (x *FlightBookResponse) Reset() {
	*x = FlightBookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightBookResponse) ProtoMessage() {}

func (x *FlightBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightBookResponse.ProtoReflect.Descriptor instead.
func (*FlightBookResponse) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{22}
}

func (x *FlightBookResponse) GetDeparturePnrId() string {
	if x != nil {
		return x.DeparturePnrId
	}
	return ""
}

func (x *FlightBookResponse) GetReturnPnrId() string {
	if x != nil {
		return x.ReturnPnrId
	}
	return ""
}

func (x *FlightBookResponse) GetDepartureNetAgentPrice() float64 {
	if x != nil {
		return x.DepartureNetAgentPrice
	}
	return 0
}

func (x *FlightBookResponse) GetReturnNetAgentPrice() float64 {
	if x != nil {
		return x.ReturnNetAgentPrice
	}
	return 0
}

func (x *FlightBookResponse) GetDepartAdminFee() float64 {
	if x != nil {
		return x.DepartAdminFee
	}
	return 0
}

func (x *FlightBookResponse) GetReturnAdminFee() float64 {
	if x != nil {
		return x.ReturnAdminFee
	}
	return 0
}

func (x *FlightBookResponse) GetTotalDeparturePrice() float64 {
	if x != nil {
		return x.TotalDeparturePrice
	}
	return 0
}

func (x *FlightBookResponse) GetTotalReturnPrice() float64 {
	if x != nil {
		return x.TotalReturnPrice
	}
	return 0
}

func (x *FlightBookResponse) GetTotalOrderPublishPrice() float64 {
	if x != nil {
		return x.TotalOrderPublishPrice
	}
	return 0
}

func (x *FlightBookResponse) GetDeparturePublishAgentPrice() float64 {
	if x != nil {
		return x.DeparturePublishAgentPrice
	}
	return 0
}

func (x *FlightBookResponse) GetReturnPublishAgentPrice() float64 {
	if x != nil {
		return x.ReturnPublishAgentPrice
	}
	return 0
}

func (x *FlightBookResponse) GetTotalOrderWithAdminFee() float64 {
	if x != nil {
		return x.TotalOrderWithAdminFee
	}
	return 0
}

func (x *FlightBookResponse) GetBookingResponseMessage() string {
	if x != nil {
		return x.BookingResponseMessage
	}
	return ""
}

func (x *FlightBookResponse) GetBookingResponseCode() string {
	if x != nil {
		return x.BookingResponseCode
	}
	return ""
}

func (x *FlightBookResponse) GetTotalOrderWithTax() float64 {
	if x != nil {
		return x.TotalOrderWithTax
	}
	return 0
}

func (x *FlightBookResponse) GetTotalTax() float64 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *FlightBookResponse) GetNtsa() float64 {
	if x != nil {
		return x.Ntsa
	}
	return 0
}

func (x *FlightBookResponse) GetCommision() float64 {
	if x != nil {
		return x.Commision
	}
	return 0
}

func (x *FlightBookResponse) GetTotalFare() float64 {
	if x != nil {
		return x.TotalFare
	}
	return 0
}

func (x *FlightBookResponse) GetTotalOrderPriceWithoutInsurance() float64 {
	if x != nil {
		return x.TotalOrderPriceWithoutInsurance
	}
	return 0
}

func (x *FlightBookResponse) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

type RequestAfterBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PnrId     string `protobuf:"bytes,1,opt,name=PnrId,proto3" json:"PnrId,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	BookingId string `protobuf:"bytes,3,opt,name=BookingId,proto3" json:"BookingId,omitempty"`
}

func (x *RequestAfterBook) Reset() {
	*x = RequestAfterBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAfterBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAfterBook) ProtoMessage() {}

func (x *RequestAfterBook) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAfterBook.ProtoReflect.Descriptor instead.
func (*RequestAfterBook) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{23}
}

func (x *RequestAfterBook) GetPnrId() string {
	if x != nil {
		return x.PnrId
	}
	return ""
}

func (x *RequestAfterBook) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RequestAfterBook) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

type FlightHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingCode            string               `protobuf:"bytes,1,opt,name=BookingCode,proto3" json:"BookingCode,omitempty"`
	ExpiredBooking         string               `protobuf:"bytes,2,opt,name=ExpiredBooking,proto3" json:"ExpiredBooking,omitempty"`
	Status                 string               `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	NetAgentPrice          float64              `protobuf:"fixed64,4,opt,name=NetAgentPrice,proto3" json:"NetAgentPrice,omitempty"`
	TotalPrice             float64              `protobuf:"fixed64,5,opt,name=TotalPrice,proto3" json:"TotalPrice,omitempty"`
	TotalInsurancePrice    float64              `protobuf:"fixed64,6,opt,name=TotalInsurancePrice,proto3" json:"TotalInsurancePrice,omitempty"`
	NetAgentInsurancePrice float64              `protobuf:"fixed64,7,opt,name=NetAgentInsurancePrice,proto3" json:"NetAgentInsurancePrice,omitempty"`
	Passanger              []*DataPassenger     `protobuf:"bytes,8,rep,name=Passanger,proto3" json:"Passanger,omitempty"`
	SegmentFlight          []*DataFlightJourney `protobuf:"bytes,9,rep,name=SegmentFlight,proto3" json:"SegmentFlight,omitempty"`
	BookingId              string               `protobuf:"bytes,10,opt,name=BookingId,proto3" json:"BookingId,omitempty"`
}

func (x *FlightHistoryResponse) Reset() {
	*x = FlightHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_flight_middleware_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightHistoryResponse) ProtoMessage() {}

func (x *FlightHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flight_middleware_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightHistoryResponse.ProtoReflect.Descriptor instead.
func (*FlightHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_flight_middleware_proto_rawDescGZIP(), []int{24}
}

func (x *FlightHistoryResponse) GetBookingCode() string {
	if x != nil {
		return x.BookingCode
	}
	return ""
}

func (x *FlightHistoryResponse) GetExpiredBooking() string {
	if x != nil {
		return x.ExpiredBooking
	}
	return ""
}

func (x *FlightHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FlightHistoryResponse) GetNetAgentPrice() float64 {
	if x != nil {
		return x.NetAgentPrice
	}
	return 0
}

func (x *FlightHistoryResponse) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *FlightHistoryResponse) GetTotalInsurancePrice() float64 {
	if x != nil {
		return x.TotalInsurancePrice
	}
	return 0
}

func (x *FlightHistoryResponse) GetNetAgentInsurancePrice() float64 {
	if x != nil {
		return x.NetAgentInsurancePrice
	}
	return 0
}

func (x *FlightHistoryResponse) GetPassanger() []*DataPassenger {
	if x != nil {
		return x.Passanger
	}
	return nil
}

func (x *FlightHistoryResponse) GetSegmentFlight() []*DataFlightJourney {
	if x != nil {
		return x.SegmentFlight
	}
	return nil
}

func (x *FlightHistoryResponse) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

var File_proto_flight_middleware_proto protoreflect.FileDescriptor

var file_proto_flight_middleware_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x78, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x50, 0x61, 0x78, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x78, 0x49, 0x6e,
	0x66, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x78, 0x49,
	0x6e, 0x66, 0x61, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x46, 0x61,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x61, 0x72, 0x65, 0x52, 0x04, 0x46, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a,
	0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x22, 0x49, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x74, 0x73, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4e, 0x74, 0x73, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x0f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x50, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x78,
	0x41, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x78,
	0x41, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x78, 0x49, 0x6e, 0x66,
	0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x43, 0x68, 0x65,
	0x61, 0x70, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x73, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x49, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x22, 0xa3, 0x03, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x46, 0x61, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x46, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x19, 0x44, 0x61,
	0x74, 0x61, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x22, 0xa1, 0x01,
	0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x62, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x61, 0x67, 0x73, 0x4b, 0x69, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x61, 0x67, 0x73, 0x4b, 0x69, 0x6c, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x67, 0x73, 0x51,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x67, 0x73, 0x51, 0x74,
	0x79, 0x22, 0xa1, 0x06, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x67,
	0x67, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6c, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6c, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4e, 0x75,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x62, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x53,
	0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x08, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x65, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfc, 0x02,
	0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x61, 0x62,
	0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67,
	0x65, 0x4b, 0x69, 0x6c, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6c, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x65,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0xbc, 0x06, 0x0a,
	0x12, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x52, 0x09, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x50, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x78, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x78, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x78, 0x49, 0x6e,
	0x66, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x78, 0x49,
	0x6e, 0x66, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x52,
	0x0a, 0x50, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66,
	0x61, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x66, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb9, 0x04, 0x0a, 0x13,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x32, 0x0a,
	0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x46,
	0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x64, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74,
	0x46, 0x61, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x11, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x3f,
	0x0a, 0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x52, 0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x72, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xab, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x74, 0x70, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x74, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x44, 0x4f, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x4f, 0x42, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x12, 0x30,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x88,
	0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x73,
	0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xcc, 0x07, 0x0a, 0x12, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6e, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6e, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x50, 0x6e, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6e, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x74, 0x73, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x4e, 0x74, 0x73, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x72, 0x65,
	0x12, 0x48, 0x0a, 0x1f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x6e, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6e, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xbd, 0x03, 0x0a, 0x15, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4e, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x4e, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4e, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x52, 0x09,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x32, 0xdd, 0x04, 0x0a, 0x0e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x13, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x45, 0x0a, 0x0f,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x12, 0x4a, 0x0a, 0x0f, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x78, 0x69, 0x61, 0x2d, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x74, 0x69, 0x78, 0x69, 0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_flight_middleware_proto_rawDescOnce sync.Once
	file_proto_flight_middleware_proto_rawDescData = file_proto_flight_middleware_proto_rawDesc
)

func file_proto_flight_middleware_proto_rawDescGZIP() []byte {
	file_proto_flight_middleware_proto_rawDescOnce.Do(func() {
		file_proto_flight_middleware_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_flight_middleware_proto_rawDescData)
	})
	return file_proto_flight_middleware_proto_rawDescData
}

var file_proto_flight_middleware_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_flight_middleware_proto_goTypes = []any{
	(*RequestFlightInsurance)(nil),    // 0: server.RequestFlightInsurance
	(*ResponseFlightInsurance)(nil),   // 1: server.ResponseFlightInsurance
	(*InsuranceCoverage)(nil),         // 2: server.InsuranceCoverage
	(*DataInsuranceFare)(nil),         // 3: server.DataInsuranceFare
	(*ResponseCheckProvider)(nil),     // 4: server.ResponseCheckProvider
	(*ScheduleRequest)(nil),           // 5: server.ScheduleRequest
	(*ScheduleResponse)(nil),          // 6: server.ScheduleResponse
	(*DataScheduleResponse)(nil),      // 7: server.DataScheduleResponse
	(*MergedSchedule)(nil),            // 8: server.MergedSchedule
	(*DataJourneyMergedSchedule)(nil), // 9: server.DataJourneyMergedSchedule
	(*DataClassMergedSchedule)(nil),   // 10: server.DataClassMergedSchedule
	(*DataFlightJourney)(nil),         // 11: server.DataFlightJourney
	(*DetailAirport)(nil),             // 12: server.DetailAirport
	(*DataClassGroup)(nil),            // 13: server.DataClassGroup
	(*DataSubClass)(nil),              // 14: server.DataSubClass
	(*FlightPriceRequest)(nil),        // 15: server.FlightPriceRequest
	(*FlightPriceResponse)(nil),       // 16: server.FlightPriceResponse
	(*FlightDetailPrice)(nil),         // 17: server.FlightDetailPrice
	(*DataContact)(nil),               // 18: server.DataContact
	(*DataAgentContact)(nil),          // 19: server.DataAgentContact
	(*DataPassenger)(nil),             // 20: server.DataPassenger
	(*DataPassport)(nil),              // 21: server.DataPassport
	(*FlightBookResponse)(nil),        // 22: server.FlightBookResponse
	(*RequestAfterBook)(nil),          // 23: server.RequestAfterBook
	(*FlightHistoryResponse)(nil),     // 24: server.FlightHistoryResponse
	(*emptypb.Empty)(nil),             // 25: google.protobuf.Empty
}
var file_proto_flight_middleware_proto_depIdxs = []int32{
	11, // 0: server.RequestFlightInsurance.FlightSegments:type_name -> server.DataFlightJourney
	3,  // 1: server.ResponseFlightInsurance.Fare:type_name -> server.DataInsuranceFare
	2,  // 2: server.ResponseFlightInsurance.Coverage:type_name -> server.InsuranceCoverage
	7,  // 3: server.ScheduleResponse.Departure:type_name -> server.DataScheduleResponse
	7,  // 4: server.ScheduleResponse.Return:type_name -> server.DataScheduleResponse
	11, // 5: server.DataScheduleResponse.Segment:type_name -> server.DataFlightJourney
	13, // 6: server.DataScheduleResponse.ClassGroup:type_name -> server.DataClassGroup
	8,  // 7: server.DataScheduleResponse.MergedSchedule:type_name -> server.MergedSchedule
	9,  // 8: server.MergedSchedule.Journeys:type_name -> server.DataJourneyMergedSchedule
	10, // 9: server.MergedSchedule.Classes:type_name -> server.DataClassMergedSchedule
	12, // 10: server.DataFlightJourney.DetailDeparture:type_name -> server.DetailAirport
	12, // 11: server.DataFlightJourney.DetailArrival:type_name -> server.DetailAirport
	14, // 12: server.DataClassGroup.SubClass:type_name -> server.DataSubClass
	11, // 13: server.FlightPriceRequest.Departure:type_name -> server.DataFlightJourney
	11, // 14: server.FlightPriceRequest.Return:type_name -> server.DataFlightJourney
	18, // 15: server.FlightPriceRequest.DataContact:type_name -> server.DataContact
	19, // 16: server.FlightPriceRequest.AgentContact:type_name -> server.DataAgentContact
	20, // 17: server.FlightPriceRequest.Passangers:type_name -> server.DataPassenger
	17, // 18: server.FlightPriceResponse.FlightDetailPrice:type_name -> server.FlightDetailPrice
	11, // 19: server.FlightPriceResponse.SegmentFlight:type_name -> server.DataFlightJourney
	21, // 20: server.DataPassenger.Passport:type_name -> server.DataPassport
	20, // 21: server.FlightHistoryResponse.Passanger:type_name -> server.DataPassenger
	11, // 22: server.FlightHistoryResponse.SegmentFlight:type_name -> server.DataFlightJourney
	5,  // 23: server.FlightResponse.FlightSchedule:input_type -> server.ScheduleRequest
	15, // 24: server.FlightResponse.FlightPrice:input_type -> server.FlightPriceRequest
	15, // 25: server.FlightResponse.FlightBooking:input_type -> server.FlightPriceRequest
	23, // 26: server.FlightResponse.FlightCancelBooking:input_type -> server.RequestAfterBook
	23, // 27: server.FlightResponse.FlightTicketing:input_type -> server.RequestAfterBook
	23, // 28: server.FlightResponse.FlightHistories:input_type -> server.RequestAfterBook
	25, // 29: server.FlightResponse.CheckProvider:input_type -> google.protobuf.Empty
	0,  // 30: server.FlightResponse.GetInsurance:input_type -> server.RequestFlightInsurance
	6,  // 31: server.FlightResponse.FlightSchedule:output_type -> server.ScheduleResponse
	16, // 32: server.FlightResponse.FlightPrice:output_type -> server.FlightPriceResponse
	22, // 33: server.FlightResponse.FlightBooking:output_type -> server.FlightBookResponse
	23, // 34: server.FlightResponse.FlightCancelBooking:output_type -> server.RequestAfterBook
	23, // 35: server.FlightResponse.FlightTicketing:output_type -> server.RequestAfterBook
	24, // 36: server.FlightResponse.FlightHistories:output_type -> server.FlightHistoryResponse
	4,  // 37: server.FlightResponse.CheckProvider:output_type -> server.ResponseCheckProvider
	1,  // 38: server.FlightResponse.GetInsurance:output_type -> server.ResponseFlightInsurance
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_flight_middleware_proto_init() }
func file_proto_flight_middleware_proto_init() {
	if File_proto_flight_middleware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_flight_middleware_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RequestFlightInsurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseFlightInsurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*InsuranceCoverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DataInsuranceFare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseCheckProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DataScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MergedSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DataJourneyMergedSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DataClassMergedSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DataFlightJourney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DetailAirport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DataClassGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DataSubClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FlightPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FlightPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*FlightDetailPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DataContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DataAgentContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DataPassenger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DataPassport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*FlightBookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RequestAfterBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_flight_middleware_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*FlightHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_flight_middleware_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_flight_middleware_proto_goTypes,
		DependencyIndexes: file_proto_flight_middleware_proto_depIdxs,
		MessageInfos:      file_proto_flight_middleware_proto_msgTypes,
	}.Build()
	File_proto_flight_middleware_proto = out.File
	file_proto_flight_middleware_proto_rawDesc = nil
	file_proto_flight_middleware_proto_goTypes = nil
	file_proto_flight_middleware_proto_depIdxs = nil
}
